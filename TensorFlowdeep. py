# 1. Importa le librerie necessarie
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import numpy as np

# 2. Crea dati fittizi di esempio (X: input, y: etichette)
X_train = np.random.random((1000, 20))          # 1000 esempi, 20 caratteristiche
y_train = np.random.randint(10, size=(1000,))   # Etichette da 0 a 9 (10 classi)

X_test = np.random.random((200, 20))            # Dati di test
y_test = np.random.randint(10, size=(200,))

# 3. Crea il modello MLP
model = Sequential([
    Dense(64, activation='relu', input_shape=(20,)),  # Primo hidden layer
    Dense(64, activation='relu'),                     # Secondo hidden layer
    Dense(10, activation='softmax')                   # Output layer (10 classi)
])

# 4. Compila il modello
model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

# 5. Mostra la struttura del modello
model.summary()

# 6. Allena il modello
model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2)

# 7. Valuta il modello sui dati di test
loss, accuracy = model.evaluate(X_test, y_test)
print(f"\nTest Loss: {loss:.4f} - Test Accuracy: {accuracy:.4f}")

# 8. Fai una previsione su un nuovo esempio
new_sample = np.random.random((1, 20))  # Un nuovo esempio (1 riga, 20 feature)
prediction = model.predict(new_sample)

# 9. Stampa il risultato della previsione
predicted_class = np.argmax(prediction)
print(f"\nClasse prevista: {predicted_class}")
